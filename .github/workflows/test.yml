name: Test

on:
  pull_request:
    branches:
      - master
    paths-ignore:
      - '**/*.md'
      - 'mics/**'
  push:
    branches:
      - master
    tags-ignore:
      - 'v*'
    paths-ignore:
      - '**/*.md'
      - 'mics/**'
  workflow_dispatch:
    inputs:
      target:
        description: 'Target architecture to test'
        required: false
        default: 'arm-unknown-linux-gnueabihf'
        type: choice
        options:
          - arm-unknown-linux-gnueabihf
          - armv7-unknown-linux-gnueabihf
          - aarch64-unknown-linux-gnu
          - x86_64-unknown-linux-gnu
  workflow_call:
    inputs:
      target:
        description: 'Target architecture to test'
        required: false
        default: 'arm-unknown-linux-gnueabihf'
        type: string

env:
  TARGET: ${{ inputs.target || 'arm-unknown-linux-gnueabihf' }}

jobs:
  test:
    runs-on: ubuntu-latest # TODO: change to arm once it is no longer in public preview
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache cargo build, registry, index, and binaries
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/index
            target
            ~/.cargo/bin
          key: ${{ runner.os }}-cargo-${{ env.TARGET }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ env.TARGET }}-

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true

      - name: Run cargo fmt
        run: cargo fmt -- --check

      - name: Run cargo check
        run: cargo check

      - name: Run cargo clippy
        run: cargo clippy -- -D warnings

      - name: Install cross
        run: |
          if ! command -v cross &> /dev/null; then
            cargo install cross
          else
            echo "cross is already installed"
          fi

      - name: Build binary with cross
        run: cross build --release --target=${{ env.TARGET }}

      - name: Test binary with cross (Open-Meteo)
        env:
          RUN_MODE: test
          TZ: Australia/Melbourne
        run: cross test --target=${{ env.TARGET }}

      - name: Test BOM snapshot
        env:
          RUN_MODE: test
          APP_API__PROVIDER: bom
          TZ: Australia/Melbourne
        run: cross test --target=${{ env.TARGET }} --test snapshot_provider_test
